#!/bin/bash

# D√©finir le chemin relatif vers le fichier .env
ENV_FILE=".env"

# Fonction pour afficher les erreurs et sortir
error_exit() {
    echo "‚ùå ERROR: $1" >&2
    exit 1
}

# Fonction pour afficher les succ√®s
success_message() {
    echo "‚úÖ SUCCESS: $1"
}

# V√©rifier si kubectl est install√©
command -v kubectl >/dev/null 2>&1 || error_exit "kubectl n'est pas install√©"

# V√©rifier si le fichier .env existe
if [ ! -f "$ENV_FILE" ]; then
    error_exit "Le fichier $ENV_FILE n'existe pas"
fi

# Charger les variables d'environnement
. "$ENV_FILE" || error_exit "Impossible de charger le fichier .env"

# V√©rifier que les variables n√©cessaires sont d√©finies
[ -z "$NAME_PG_SCRET_SOURCE" ] && error_exit "NAME_PG_SCRET_SOURCE n'est pas d√©fini dans .env"
[ -z "$NAMESPACE_PG_SCRET_SOURCE" ] && error_exit "NAMESPACE_PG_SCRET_SOURCE n'est pas d√©fini dans .env"

# Afficher les informations de configuration
echo "üîÑ Configuration:"
echo "  - Secret source: $NAME_PG_SCRET_SOURCE"
echo "  - Namespace source: $NAMESPACE_PG_SCRET_SOURCE"
echo "  - Namespace destination: dagster"

# V√©rifier si le secret existe dans le namespace postgres
if ! kubectl get secret "$NAME_PG_SCRET_SOURCE" -n "$NAMESPACE_PG_SCRET_SOURCE" >/dev/null 2>&1; then
    error_exit "Le secret $NAME_PG_SCRET_SOURCE n'existe pas dans le namespace $NAMESPACE_PG_SCRET_SOURCE"
fi

# Cr√©er le namespace dagster s'il n'existe pas
kubectl create namespace dagster --dry-run=client -o yaml | kubectl apply -f - || error_exit "Impossible de cr√©er/v√©rifier le namespace dagster"

# R√©cup√©rer les donn√©es du secret avec les bonnes cl√©s
POSTGRES_USER=$(kubectl get secret "$NAME_PG_SCRET_SOURCE" -n "$NAMESPACE_PG_SCRET_SOURCE" -o jsonpath='{.data.POSTGRES_USER}' 2>/dev/null) || error_exit "Impossible de r√©cup√©rer POSTGRES_USER"
POSTGRES_PASSWORD=$(kubectl get secret "$NAME_PG_SCRET_SOURCE" -n "$NAMESPACE_PG_SCRET_SOURCE" -o jsonpath='{.data.POSTGRES_PASSWORD}' 2>/dev/null) || error_exit "Impossible de r√©cup√©rer POSTGRES_PASSWORD"
POSTGRES_DB=$(kubectl get secret "$NAME_PG_SCRET_SOURCE" -n "$NAMESPACE_PG_SCRET_SOURCE" -o jsonpath='{.data.POSTGRES_DB}' 2>/dev/null) || error_exit "Impossible de r√©cup√©rer POSTGRES_DB"

# V√©rifier que toutes les donn√©es sont pr√©sentes
[ -z "$POSTGRES_USER" ] && error_exit "POSTGRES_USER non trouv√© dans le secret"
[ -z "$POSTGRES_PASSWORD" ] && error_exit "POSTGRES_PASSWORD non trouv√© dans le secret"
[ -z "$POSTGRES_DB" ] && error_exit "POSTGRES_DB non trouv√© dans le secret"

# Cr√©er ou mettre √† jour le secret dans le namespace dagster
cat << EOF | kubectl apply -f - || error_exit "Impossible de cr√©er/mettre √† jour le secret dans le namespace dagster"
apiVersion: v1
kind: Secret
metadata:
  name: $NAME_PG_SCRET_SOURCE
  namespace: dagster
type: Opaque
data:
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  POSTGRES_DB: $POSTGRES_DB
EOF

# V√©rifier que le secret a √©t√© cr√©√©
if kubectl get secret "$NAME_PG_SCRET_SOURCE" -n dagster >/dev/null 2>&1; then
    success_message "Secret cr√©√©/mis √† jour avec succ√®s dans le namespace dagster"
    echo "üìù D√©tails:"
    echo "  - Nom du secret: $NAME_PG_SCRET_SOURCE"
    echo "  - Namespace source: $NAMESPACE_PG_SCRET_SOURCE"
    echo "  - Namespace destination: dagster"
    
    # V√©rification des valeurs (optionnel)
    echo -e "\nüîç V√©rification des valeurs:"
    echo -n "POSTGRES_DB: "
    kubectl get secret $NAME_PG_SCRET_SOURCE -n dagster -o jsonpath='{.data.POSTGRES_DB}' | base64 --decode
    echo
    echo -n "POSTGRES_USER: "
    kubectl get secret $NAME_PG_SCRET_SOURCE -n dagster -o jsonpath='{.data.POSTGRES_USER}' | base64 --decode
    echo
    echo "POSTGRES_PASSWORD: ***" # Pour la s√©curit√©, on n'affiche pas le mot de passe
else
    error_exit "Le secret n'a pas √©t√© cr√©√© correctement dans le namespace dagster"
fi